//- 画像切り替え
//- @example
//- --------
//- +picture('assets/img/test.png', 'alt')  //- RetinaとLazy Loadはデフォルト対応
//- +picture('assets/img/test.png', 'alt', { retina: false })  //- Retina非対応
//- +picture('assets/img/test.png', 'alt', { arraySuffix: ['@2x', '@3x'] })  //- Retina2〜3倍対応
//- +picture('assets/img/test.png', 'alt', { large: true })  //- PC大画面対応
//- +picture('assets/img/test.png', 'alt', { dirs: ['/sp/', '/pc/'] })  //- ディレクトリを指定
//- +picture('assets/img/test.png', 'alt', { loading: false })  //- Lazy Load非対応
//- +picture('assets/img/test.png', 'alt', { decoding: 'async' })  //- decoding="async"対応
//- --------
mixin source({ srcset = [], media = `(max-width: ${ breakPointSp }px)` } = {}, loading)
  source(media=media srcset=`${ srcset.join(', ') }` width=loading ? getWidth(srcset[0]) : null height=loading ? getHeight(srcset[0]) : null)

mixin picture(pathImg, alt = '', { retina = true, arraySuffix = ['@2x'], largeSuffix = ['@large', '@2x'], dirs = ['/', '/pc/'], large = false, loading = 'lazy', decoding = false } = {})
  -
    if (!pathImg) throw new Error('pathImg is not defined.')
    if (arraySuffix[0] !== '') arraySuffix.unshift('')
    if (!retina) arraySuffix = [arraySuffix[0]]
    if (!retina) largeSuffix = [largeSuffix[0]]
    const { dir, base, name, ext } = parsePath(pathImg)
    const imgs = map(dirs, (injectDir) => `${ dir }${ injectDir }${ base }`)
  picture&attributes(attributes)
    +source({ srcset:[imgs[0]] }, loading)
    +source({ srcset: getSrcset(pathImg, dirs[1], arraySuffix), media: `(min-width: ${ breakPointPc }px)` }, loading)
    if large
      +source({ srcset: getSrcset(pathImg, dirs[1], largeSuffix), media: `(min-width: ${ breakPointPcLarge }px)` }, loading)
    img(src=imgs[1] alt!=alt loading=loading width=loading ? getWidth(imgs[1]) : null height=loading ? getHeight(imgs[1]) : null decoding=decoding)

//- @example
//- --------
//- +webp('example.png', '', false) //- Lazy Load非対応
//- --------
mixin webp(fileName, alt, loading = 'lazy')
  img(src=`${ pathImg }${ fileName }` alt!=alt loading=loading)

//- @example
//- --------
//- +img('example.png', '', false) //- Lazy Load非対応
//- --------
mixin img(pathImg, alt = '', loading = 'lazy')
  img(src=pathImg alt!=alt loading=loading width=loading ? getWidth(pathImg) : null height=loading ? getHeight(pathImg) : null)

//- svg呼び出し
mixin svg(id, title = '', url = '')
  svg&attributes(attributes)
    if title
      title!=title
    use(xlink:href=`${ url }#${ id }`)/

//- デバイステキスト分割
//- @example
//- --------
//- +splitText('test')
//- +splitText('test<br>test') //- 改行あり
//- +splitText('test', { tagName: 'div' })  //- tag指定。デフォルトはspan。
//- +splitText('test', { charClass: 'text' })  //- class指定。デフォルトは.char。
//- --------
mixin splitText(str, { type = 'char', tagName = 'span', charClass = 'char' } = {})
  -
    if (typeof(str) !== 'string') throw new TypeError(`${ str }: type isn't string`)
    const { regex, className } = {
      char: {
        regex: /(?=[^>]*(?:<|$))/,
        className: charClass
      },
    }[type]
  each val, i in str.split(regex)
    - const nbsp = val === ' ' && '&nbsp;'
    if val.match(/[&<>'"]/)
      !=val
    else
      #{ tagName }(class=className class=`${ className }-${ i + 1 }` class=nbsp && 'space')&attributes(attributes)!=nbsp ? nbsp : val
